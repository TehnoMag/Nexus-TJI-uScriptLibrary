MACHINE "uSL/module/Universe"

	#include "uSL/module/initialize"
	
		RULE	event onInitialize
			:action
							
				U.uSL.Universe := this;
				Debug("uSL Module 'Universe' initialized");
				
			:end
		END
	
	#include "uSL/module/body"
	
		/*
			This function manage calculation of story date and update it
			E.days - date step in days
			0 < E.days < 32 cos Engine issue
		*/
		RULE	event DateStep
			condition E.days>0&E.days<32;
			:action
				
				E.s_day := sNumPad(U.day + E.days, 2);
				E.s_month := sNumPad(U.month, 2);
				E.s_year := sNumPad(U.year, 4);
				
				E.s_date := sCat(E.s_year, ".");
				E.s_date := sCat(E.s_date, sCat(E.s_month, "."));
				E.s_date := sCat(E.s_date, sCat(E.s_day, "."));
				
				uSetStoryDate(E.s_date);
				
			:end
			
		END
		
		//Just for testing porpouse
		
		RULE	event CreateSystem
			#include "uSL/function/private"
			:action
			
				E.system_ref := U.uSL.Class:localEvent(New, E.class := "System");
				E.system_cls := U.uSL.Class:last;
				E.system_cls:localEvent(Create, E.ref := P.system_ref; E.system := P.system);
				E.id := indexOf(_tjilist, E.system);
				setN(_usllist, E.id, E.system_ref);
				
			:end
		END
		
		RULE	event InitUniverse
			:action
			
				//Create 2 lists for contain original objects and extended objects
				_tjilist := getFreeSel();
				uSelect(_tjilist, uGetUniverse(), S:system());
				Dump(_tjilist);
				
				_usllist := getFreeSel();
					DIM(_usllist, NumOf(_tjilist));
					
					
				ExecList(
					_tjilist,
						this:localEvent(CreateSystem, E.system := S.this)
				);
			
				/*test := U.uSL.Class:localEvent(New, E.class := "System");
				test_cls := U.uSL.Class:last;
				test_cls:localEvent(Create, E.ref := C.test; E.system := uGet("sys_Sol"));*/
			
			:end
		END
		
		RULE	event getSystem
			:action
				
				E._tjisys := uGet(E.system);
				E.id := indexOf(_tjilist, E._tjisys);
				Return(getN(_usllist, E.id));
				
			:end
		END
		
	#include "uSL/module/end"

END