RULE	event ClassMain
	:action
		e:class := getMachine("/Class/Example");
		e:usl:localEvent(RegisterClass, e:class := p:class);
	:end
END

MACHINE "/Class/Example"

	STATE _HEADER_
		
		RULE	event In
			:action
				_CLASS_NAME := "Example";
			:end
		END
		
	END

	STATE _DECL_
	
		RULE	event In
			:action
				var1 := self:localEvent(NewVar,0);
				var2 := self:localEvent(NewVar,0);
				var3 := self:localEvent(NewVar,0);
			:end
		END
	
	END
	
	STATE _CLASS_
	
		RULE	event _constructor
			:action
				self:localEvent(SetVar, e:var := self:var1; e:val := 2);
				self:localEvent(SetVar, e:var := self:var2; e:val := 4);
				self:localEvent(SetVar, e:var := self:var3; e:val := 8);
			:end
		END
		
		RULE	event _destructor
			:action
			:end
		END
	
		RULE	event TestMehtod
			#include "MethodBegin"
			:action
				e:var1 := self:localEvent(GetVar, e:var := self:var1);
				e:var2 := self:localEvent(GetVar, e:var := self:var2);
				e:var3 := e:var1 + e:var2;
				self:localEvent(SetVar, e:var := self:var3; e:val := p:var3);
			:end
			#include "MethodEnd"
		END
		
		RULE	event TestMethod2
			#include "MethodBegin"
			:action
				e:r := self:localEvent(Add, e:r := self:var3; e:a := self:var1; e:b := self:var2);
				debug(e:r);
			:end
			#include "MethodEnd"
		END
		
		RULE	event PrintVar3
			#include "MethodBegin"
			:action
				e:var3 := self:localEvent(GetVar, e:var := self:var3);
				debug(e:var3);
			:end
			#include "MethodEnd"
		END
	
	END
	
END
