RULE	event ModuleMain
	:action
		e:module := getMachine("/Module/Class");
		e:usl:localEvent(RegisterModule, e:module := p:module);
	:end
END

MACHINE "/Module/Class"
	
	STATE _HEADER_
	
		RULE	event In
			:action
				_MODULE_NAME := "Class";
				_USL_VERSION_MIN := 200;
				_USL_VERSION_MAX := 299;
			:end
		END
	
	END
	
	STATE _INIT_

		RULE	event In
			:action
				_class := getFreeSel();
				dim(_class, 256);
				
				_className := getFreeSel();
				dim(_className, 256);
				
				_class_id := 0;
				
				uCall(ClassMain, e:usl := c:this);
			:end
		END
		
		RULE	event RegisterClass
			:action
				self := e:class;

				self:_inststack := self:getFreeSel();
				self:dim(_inststack, 256);
				
				self:_inst_id := 0;
				self:_var_id := -1;
				
				self:changeState(_HEADER_, 0);
				setN(_class, _class_id, self);
				setN(_className, _class_id, self:_CLASS_NAME);
				_class_id := _class_id + 1;
				
				self:self := this;
				self:changeState(_DECL_, 0);
				self := 0;
				
				e:class:changeState(_CLASS_, 0);
			:end
		END
		
		RULE	event NewVar
			:action
				self:_var_id := self:_var_id + 1;
				
				Return(self:_var_id);
			:end
		END
		
	END
	
	STATE _MODULE_
	
		RULE	event GetClass
			:action
				e:it := 0;
				e:r := -1;
				
				while(e:it < _class_id & e:r < 0,
					if(sCmp(getN(_ClassName, e:it), e:class) = 0,
						e:r := e:it;
					);
					e:it := e:it+1;
				);
				
				if (e:r >= 0,
					Return(getN(_class, e:r));
				);
				
			:end
		END
	
		RULE	event New
			:action
				self := localEvent(GetClass, e:class := p:class);
				
				e:ref := self:getFreeSel();
				self:dim(e:ref, 256);
				self:setN(_inststack, _inst_id, e:ref);
				e:ref := self:_inst_id;
				self:_inst_id := self:_inst_id + 1;
				self:localEvent(_constructor, e:ref := p:ref);
				self := 0;
				Return(e:ref);
			:end
		END
		
		RULE	event Free
			:action
			
			:end
		END
		
		RULE	event SetVar
			:action
				e:ref := self:getN(_inststack, p:ref);
				self:setN(e:ref, e:var, e:val);
			:end
		END
		
		RULE	event GetVar
			:action
				e:ref := self:getN(_inststack, p:ref);
				Return(self:getN(e:ref, e:var));
			:end
		END
		
		RULE	event Add
			:action
				e:ref := self:getN(_inststack, p:ref);
				e:va := self:getN(e:ref, e:a);
				e:vb := self:getN(e:ref, e:b);
				e:vc := e:va + e:vb;
				self:setN(e:ref, e:r, e:vc);
				Return(e:vc);
			:end
		END
		
		RULE	event Sub
			:action
				e:ref := self:getN(_inststack, p:ref);
				e:va := self:getN(e:ref, e:a);
				e:vb := self:getN(e:ref, e:b);
				e:vc := e:va - e:vb;
				self:setN(e:ref, e:r, e:vc);
				Return(e:vc);
			:end
		END
		
		RULE	event Mul
			:action
				e:ref := self:getN(_inststack, p:ref);
				e:va := self:getN(e:ref, e:a);
				e:vb := self:getN(e:ref, e:b);
				e:vc := e:va * e:vb;
				self:setN(e:ref, e:r, e:vc);
				Return(e:vc);
			:end
		END
		
		
		RULE	event Div
			:action
				e:ref := self:getN(_inststack, p:ref);
				e:va := self:getN(e:ref, e:a);
				e:vb := self:getN(e:ref, e:b);
				e:vc := e:va / e:vb;
				self:setN(e:ref, e:r, e:vc);
				Return(e:vc);
			:end
		END
	END
	
END