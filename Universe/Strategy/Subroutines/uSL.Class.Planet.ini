RULE	event uSL.Universe.GetPlanetMachine
		condition C.this=getMachine("uSL/Class/Planet")
	:action
	
		E.mach := getMachine("uSL/universe/planets");
		Return(E.mach);
		
	:end
END

MACHINE "uSL/Class/Planet"

	#include "uSL/class/declaration"
	
	RULE	event __Constructor
		#include "uSL/function/private"
		:action
		
			_tjiObject := 0;
			Parent_Class := 0;
			Parent_ref := 0;
			
			//planets obrbital variables
			SemiMajorAxis := 0;
			Eccentricity := 0;
			Inclination := 0;
			AscendingNode := 0;
			ArgOfPericenter := 0;
			MeanAnomaly := 0;
			PeriodD := 0;
		
		:end
	END
	
	RULE	event __var
		:action
		
			if (!E.flag, E.flag := #uSL_CLASS_SETGET);
			
			_tjiObject := 		this:localEvent(__instvar, E.flag := P.flag; E.id := 1; E.value := _tjiObject);
			Parent_Class := 	this:localEvent(__instvar, E.flag := P.flag; E.id := 2; E.value := Parent_Class);
			Parent_ref := 		this:localEvent(__instvar, E.flag := P.flag; E.id := 3; E.value := Parent_ref);
			
			SemiMajorAxis := 	this:localEvent(__instvar, E.flag := P.flag; E.id := 4; E.value := SemiMajorAxis);
			Eccentricity := 	this:localEvent(__instvar, E.flag := P.flag; E.id := 5; E.value := Eccentricity);
			Inclination := 		this:localEvent(__instvar, E.flag := P.flag; E.id := 6; E.value := Inclination);
			AscendingNode := 	this:localEvent(__instvar, E.flag := P.flag; E.id := 7; E.value := AscendingNode);
			ArgOfPericenter := 	this:localEvent(__instvar, E.flag := P.flag; E.id := 8; E.value := ArgOfPericenter);
			MeanAnomaly := 		this:localEvent(__instvar, E.flag := P.flag; E.id := 9; E.value := MeanAnomaly);
			PeriodD := 			this:localEvent(__instvar, E.flag := P.flag; E.id := 10; E.value := PeriodD);
		
		:end
	END
		
	RULE	event calcCoords
		#include "uSL/class/instance"
		:action
		
			E.A := SemiMajorAxis;
			E.E := Eccentricity;
			E.B := E.A * Sqrt(1 - Pow(E.E, 2)); //SimiMinorAxis
			
			E.MApD := 360 / PeriodD; //Step per 1 day
			E.MA := MeanAnomaly + (E.MApD * (U.globalTime - 1)); //current MeanAnomaly
			
			E.Rp := E.A * (1 - E.E); //Perefocus
			
			E.position := vNull();
			E.position:x := E.A * Cos(E.MA) + E.RP; //must be inverted, cos in TJI all orbit rotation clockwise. And we must shift center to left, cos star placed in F2 point
			E.position:z := E.B * Sin(E.MA);
			
			//Setup rotations
			E.rot := xfRot(-AscendingNode+ArgOfPericenter, -Inclination, 0);
			E.position := vxForm(E.position, E.rot);
			
			
			Return(E.position);
		:end
		#include "uSL/class/end_instance"
	END
	
	RULE	event LoadPlanetinitParameters
		#include "uSL/function/private"
		:action
		
			
			if
			(
				Not(E.mach:isInState(InitState)),
					E.mach:changeState(InitState, 0);
			);
			
			E.mach:localEvent(CELESTIAL, E.planet := C._tjiObject);
				
			SemiMajorAxis := 	E.mach:SemiMajorAxis;
			Eccentricity := 	E.mach: Eccentricity;
			Inclination := 		E.mach:Inclination;
			AscendingNode := 	E.mach:AscendingNode;
			ArgOfPericenter := 	E.mach:ArgOfPericenter;
			MeanAnomaly := 		E.mach:MeanAnomaly;
			PeriodD := 			E.mach:PeriodD;
		
		:end
	END
	
	RULE	event Create
		#include "uSl/class/instance"
		:action
		
			_tjiObject := E.planet;
			Parent_Class := E.Parent_Class;
			Parent_ref := E.Parent_ref;
			
			assert(Parent_Class:_tjiObject:system());
			
			//load initial orbital parameters for planet
			E.pl_mach := this:uCall(uSL.Universe.GetPlanetMachine, 0);
			
			chooseFirst
			(
				isValid(E.pl_mach), this:localEvent(LoadPlanetinitParameters, E.mach := P.pl_mach),
				1, Debug("uSL Debug: Please define stateMachine 'uSL/universe/planets' with planet parameters")
			);
						
		:end
		#include "uSL/class/end_instance"
	END
	
	#include "uSL/class/end"

END