RULE	event uSL.Class.FindTemplate
		condition C.this=getMachine("uSL/Module/Class")
	:action
	
		E.template := sCat("uSL/Class/", E.class);
		E.mach := getMachine(E.template);
		assert(E.mach);
		Return(E.mach);
		
	:end
END

MACHINE "uSL/Module/Class"

	#include "uSL/module/initialize"

		RULE	event onInitialize
			:action
			
				U.uSL.Class := this;
				Debug("uSL Module Class initialized");
			
			:end
		END
	
	#include "uSL/module/body"
	
	
		RULE	event GetClass
			:action
				
				last := this:uCall(uSL.Class.FindTemplate, E.class := P.class);
				Return(last);
				
			:end
		END
	
		/* CLASS CREATION
			E.class - Class Name
			Return - instance reference
		*/
		
		RULE	event CreateInstance
			#include "uSL/function/private"
			:action
				
				last := this:uCall(uSL.Class.FindTemplate, E.class := P.class);
				
				//Allocate instance memory
				E.instance := getFreeSel();
					DIM(E.instance, #uSL_CLASS_MAXVARS);
					setN(E.instance, 0, last);
					
				last:changeState(CLASS_CONSTRUCTOR, E.instance := P.instance);
				Return(E.instance);
				
			:end
		END
		
		RULE	event PreCreateInstance
			:action
						
			:end
		END
		
		RULE	event New
				condition E.class&E.class:string
			:action
			
				Return(this:localEvent(CreateInstance, E.class := P.class));
			
			:end
		END
		
		RULE	event Create
			:action
			
				Return(this:localEvent(CreateInstance, E.class := P.class));
			
			:end
		END
		
		RULE	event Construct
			:action
			
				Return(this:localEvent(CreateInstance, E.class := P.class));
			
			:end
		END
	
		// CLASS DESTRUCTOR
		RULE	event DeleteInstance
			#include "uSL/function/private"
			:action
			
				assert(numOf(E.ref));	
				E.class := PickFirst(E.ref);
				assert(isValid(E.class));
				E.class:localEvent(__Destructor, E.ref := P.ref);
				Empty(E.ref);
				DIM(E.ref, 0);
			
			:end
		END
	
		RULE	event Delete
			:action
			
				this:localEvent(DeleteInstance, E.ref := P.ref);
			
			:end
		END
		
		RULE	event Del
			:action
				debug("del");
				this:localEvent(DeleteInstance, E.ref := P.ref);
			
			:end
		END
		
		RULE	event Destroy
			:action
			
				this:localEvent(DeleteInstance, E.ref:=P.ref);
				
			:end
		END
	
		/* CLASS VARIABLE MANAGER
		*/
		
		RULE	event __Push
			:action
			
				setN(E.instance, E.id, E.val);
			
			:end
		END
		
		RULE	event Push
			:action
			
				if
				(
					numOf(E.instance),
						this:localEvent(__Push, E.instance := P.instance; E.id := P.id; E.val := P.val)
				);				
			
			:end
		END
		
		RULE	event __Pull
			:action
			
				E.result := getN(E.instance, E.id);
				Return(E.result);
			
			:end
		END
		
		RULE	event Pull
			:action
				
				if
				(
					numOf(E.instance),
						Return(this:localEvent(__Pull, E.instance := P.instance; E.id := P.id))
				);
			
				
			:end
		END
	
	#include "uSL/module/end"
	
END