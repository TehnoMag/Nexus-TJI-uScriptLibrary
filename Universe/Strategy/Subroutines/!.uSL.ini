RULE	event UniverseScriptLibrary
	:action
		e:usl := getMachine("ScriptLibrary");
		e:usl:mod := e:mod;
		e:usl:changeState(_PREINIT_, 0);
	:end
END

MACHINE "ScriptLibrary"
	
	STATE _PREINIT_
		
		RULE	event In
			:action
				// Allocate lists for modules machens and its names
				_modules := getFreeSel();
				dim(_modules, 256);
				
				_moduleNames := getFreeSel();
				dim(_moduleNames, 256);
				
				_module_id := 0;
				
				// After this, we must register embeded and optional modules
				uCall(ModuleMain, e:usl := c:this);
				
				changeState(_INIT_, 0);
			:end
		END
		
		RULE	event RegisterModule
			:action	
				e:module:changeState(_HEADER_, 0);
				e:name := e:module:_MODULE_NAME;
				
				setN(_modules, _module_id, e:module);
				setN(_moduleNames, _module_id, e:name);
				_module_id := _module_id + 1;
				
				e:debug := sCat("Module '", e:name);
				e:debug := sCat(e:debug, "' is registred");
				debug(e:debug);				
			:end
		END
		
	END
	
	STATE _INIT_
	
		RULE	event In
			:action
				execList(_modules, s:usl := c:this);
				execList(_modules, s:changeState(_INIT_, 0));
				
				mod:usl := this;
				mod:changeState(_INIT_, 0);
				changeState(_MAIN_, 0);
			:end
		END
		
		RULE	event Use
			:action
				e:it := 0;
				e:r := -1;
				
				while(e:it < _module_id & e:r < 0,
					if (sCmp(getN(_moduleNames, e:it), e:module) = 0,
						e:r := e:it;
					);
					e:it := e:it + 1;
				);
				
				if (e:r >= 0,
					Return(getN(_modules, e:r));
				);
				
			:end
		END
		
	END
	
	STATE _MAIN_
		
		RULE	event In
			:action
				execList(_modules, s:changeState(_MODULE_, 0));
				mod:changeState(_MAIN_, 0);
			:end
		END
		
	END
	
END
